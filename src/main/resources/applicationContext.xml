<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:bean="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <bean:component-scan base-package="cn.spring.onlyo"></bean:component-scan>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="jdataSource"></property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!--<prop key="show_sql">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.region.factory_class"> org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>-->
            </props>
        </property>
        <property name="mappingResources">
            <list>
                <value>/Emp.hbm.xml</value>
            </list>
        </property>
    </bean>
    <bean id="jdataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="url" value="jdbc:mysql://localhost:3306/test?characterEncoding=utf-8"></property>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="username" value="root"></property>
        <property name="password" value="root"></property>
    </bean>

    <!-- 事物管理配置
    定义事物管理bean
    定义通知
    定义切入点 aop切入-->
    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory">

        </property>
    </bean>
    <!--开启  事物注解配置 -->
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"></tx:annotation-driven>
    <!--<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            &lt;!&ndash;指定不同的方法采用不同的事物机制&ndash;&gt;
            <tx:method name="save" propagation="REQUIRED"/>
            <tx:method name="update" propagation="REQUIRED"/>
            <tx:method name="delete" propagation="REQUIRED"/>
            <tx:method name="find*"  read-only="true"  propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="daoPoint" expression="within(cn.spring..*)"></aop:pointcut>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="daoPoint"></aop:advisor>
    </aop:config>-->

    <!--
    <bean id="helloAction" class="cn.spring.onlyo.action.HelloAction"></bean>
    -->
    <!--    <bean id="hibernateDaoImp" class="cn.spring.onlyo.dao.HibernateDaoImp">
            <property name="sessionFactory" ref="sessionFactory"></property>
        </bean>-->
    <!--    <bean id="jdbcDaoImp" class="cn.spring.onlyo.dao.JdbcDaoImp">
            &lt;!&ndash;连接资源&ndash;&gt;
            <property name="dataSource" ref="jdataSource" >
            </property>
    
        </bean>-->


    <!-- <bean name="coss" class="cn.spring.onlyo.dao.imp.CossIml"></bean>

     <bean name="action" class="cn.spring.onlyo.dao.imp.TestAction" init-method="execute"
           destroy-method="execute"></bean>
 -->
    <!--aop机制-->
    <!--<bean name="loggerBean" class="cn.spring.onlyo.aopTest.LoggerBean"></bean>-->

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!--    <aop:config>
           <aop:pointcut id="actionPointcut"
                         expression="within(cn.spring..*)"></aop:pointcut>&lt;!&ndash;within(cn.spring.onlyo..*)||execution(* set* (..))
                         bean(*Controller)&ndash;&gt;

           <aop:aspect id="loggerAspect" ref="loggerBean">
               &lt;!&ndash;
                           <aop:before pointcut-ref="actionPointcut" method="logger"></aop:before>
               &ndash;&gt;

               &lt;!&ndash;
                           <aop:after pointcut-ref="actionPointcut" method="afterT"></aop:after>
               &ndash;&gt;
               <aop:around pointcut-ref="actionPointcut" method="logger"></aop:around>
           </aop:aspect>
       </aop:config>-->
</beans>